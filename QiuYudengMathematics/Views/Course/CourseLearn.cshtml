<div id="app" class="course-learn">
    <div class="course-learn__container">
        <div class="course-learn__search-bar--flex">
            <input @@input="onInput($event)" placeholder="請輸入課程名稱" type="search">
        </div>
        <div class="course-learn__list">
            <div class="course-learn__item" v-for="item in eachPageList" :key="item.CourseSeq">
                <a style="cursor:pointer;" @@click.prevent="courseUrl(`${item.CourseSeq}`)">
                    @*<img class="course-thumbnail" />*@
                    <h3>{{item.CourseName}}</h3>
                </a>
            </div>
        </div>
        <div v-show="curList.length > 10" class="pagenation">
            <a class="first" @@click.prevent="setPage(1)">First</a>
            <a class="pre" @@click.prevent="setPage(previousPage)">Previous</a>
            <a v-for="(n, index) in totalPageCount" v-show="pageRule(n)" v-bind:class=" currPage === n ? 'active' : '' " :key="index"
               @@click.prevent="setPage(n)">{{n}}</a>
            <a class="next"  @@click.prevent="setPage(nextPage)">Next</a>
            <a class="last" @@click.prevent="setPage(totalPageCount)">Last</a>
        </div>
    </div>
</div>

<script type="text/javascript">
const vm = new Vue({
    el: '#app',
    data: {
        courseList: [],
        curList: [],
        currPage: 1,
        itemPerPage: 10
    },
        mounted() {
        axios.post("@Url.Content("~/Course/CourseQuery?SubjectId=")" + this.SubjectId)
            .then(res => {
                this.courseList = res.data.Data
                this.curList = this.courseList
                })
    },
    computed: {
        SubjectId() {
            const parsingUrl = new URL(location.href);
            return parsingUrl.searchParams.get('SubjectId')
        },
        previousPage() {
            return this.currPage - 1 > 0 ? this.currPage - 1 : 1;
        },
        nextPage() {
            return this.currPage + 1 > this.totalPageCount ? this.totalPageCount : this.currPage + 1;
        },
        totalPageCount() {
            return Math.ceil(this.curList.length / this.itemPerPage);
        },
        eachPageList() {
            const lastIdx = this.currPage * this.itemPerPage;
            const firstIdx = lastIdx - this.itemPerPage;

            return this.curList.slice(firstIdx, lastIdx);
        },
    },
    methods: {
        onInput(e) {
            this.currPage = 1;
            this.curList = this.courseList.filter(item =>
                item.CourseName.toLowerCase().indexOf(e.target.value.toLowerCase()) >= 0)
        },
        parseYoutubeId(url) {
            const parsingUrl = new URL(url);
            return parsingUrl.searchParams.get('v')
        },
        setPage(n) {
            this.currPage = n
        },
        pageRule(page) {
            return this.currPage == 1 || this.currPage == this.totalPageCount ?
                Math.abs(this.currPage - page) <= 2 : Math.abs(this.currPage - page) <= 1;
        },
        courseUrl(seq) {
            var windowf = window.open('@(Url.Content("~/Course/CourseVideo?SeqId="))' + seq, 'Video', 'width=800,height=600,menubar=no,location=no,scrollbars=no,status=yes,toolbar=no,titlebar=no,resizable=no');
            windowf.onload = function () {
                windowf.onbeforeunload = function () {
                    @*var data = {
                        Account: windowf.document.getElementById("hidAccount").value,
                        CourseSeq: windowf.document.getElementById("hidSeq").value,
                        Progress: windowf.document.getElementById("hidProgress").value
                    };
                    $.post("@(Url.Content("~/Course/UpdateProgress"))", data, function (x) {});*@
                };
            };
        }
    }

})

@*function CourseVideo(Seq) {
    window.location.href = "@(Url.Content("~/Course/CourseVideo?SeqId="))" + Course.seq;
};*@
</script>

<div id="app" class="course-management">
    <div class="course-management__container">
        <div class="course-management__search-bar--flex">
            <input @@input="onInput($event)" placeholder="請輸入課程名稱" type="search">
            <div class="course-management__btn-wrapper">
                <a @@click="addCourse" class="blue-btn">新增</a>
            </div>
        </div>
        <div class="course-management__table">
            <div class="course-management__tr">
                <div class="course-management__th">名稱</div>
                <div class="course-management__th">年級</div>
                <div class="course-management__th">科目</div>
                <div class="course-management__th">狀態</div>
                <div class="course-management__th">管理</div>
            </div>
            <div class="course-management__tr" v-for="item in eachPageList" :key="item.CourseSeq">
                <div class="course-management__td">{{item.CourseName}}</div>
                <div class="course-management__td">{{item.SubbjectInfo.SubjectGradeName}}</div>
                <div class="course-management__td">{{item.SubbjectInfo.SubjectName}}</div>
                <div class="course-management__td">
                    <i v-if="item.Enable" style="color:forestgreen" class="far fa-circle"></i>
                    <i v-else style="color:red" class="fas fa-times"></i>
                </div>
                <div class="course-management__td">
                    <a @@click.prevent="showPopUp(item.CourseSeq)"><i class="fas fa-cog"></i></a>
                    <a @@click.prevent="showTrialPopUp(item.CourseSeq, item.Student)"><i class="fas fa-user"></i></a>
                    <a @@click.prevent="showProgressPupUp(item.CourseSeq)"><i class="fas fa-circle"></i></a>
                </div>
            </div>
        </div>
        <div v-show="curList.length > 10" class="pagenation">
            <a @@click.prevent="setPage(1)">First</a>
            <a class="course-management__pre" @@click.prevent="setPage(previousPage)">Previous</a>
            <a v-for="(n, index) in totalPageCount" v-show="pageRule(n)" v-bind:class=" currPage === n ? 'active' : '' " :key="n"
               @@click.prevent="setPage(n)">{{n}}</a>
            <a class="course-management__next" @@click.prevent="setPage(nextPage)">Next</a>
            <a @@click.prevent="setPage(totalPageCount)">Last</a>
        </div>
    </div>
    <div v-show="pupUpOn" class="popup--wrapper">
        <div class="popup course-management__popup">
            <div class="popup--heading">
                <span>課程管理</span>
                <i @@click="hidePopUp" class="fas fa-times"></i>
            </div>
            <div class="popup--body">
                <div>
                    <p>名稱</p>
                    <input class="width200" :value="info.Name" v-model="info.CourseName" maxlength="50" />
                </div>
                <div>
                    <p>年級</p>
                    <div class="width200">
                        <input type="radio" id="one" value="1" v-model="info.Grade">
                        <label for="one">高一</label>
                        <input type="radio" id="two" value="2" v-model="info.Grade">
                        <label for="two">高二</label>
                        <input type="radio" id="three" value="3" v-model="info.Grade">
                        <label for="three">高三</label>
                    </div>
                </div>
                <div>
                    <p>狀態</p>
                    <div class="width200">
                        <input type="checkbox" id="checkbox" v-model="info.Enable">
                        <label for="checkbox">{{ info.Enable?"啟用":"停用" }}</label>
                    </div>
                </div>
                <div>
                    <p>科目</p>
                    <div class="width200">
                        <div v-for="item in currentSubectList" class="subject-item">
                            <input type="radio" :id="item.ID" :value="String(item.ID)" v-model="info.SubjectId">
                            <label :for="item.ID">{{item.SubjectName}}</label>
                        </div>
                    </div>
                </div>
                <div>
                    <p>連結</p>
                    <input class="width200" type="text" placeholder="請輸入影片連結" v-model="info.Url">
                </div>
                <div>
                    <p>日期</p>
                    <input class="width200" type="text" placeholder="YYYY/MM/DD" maxlength="10" v-model="info.CourseDate" />
                </div>
            </div>
            <div class="popup--footer">
                <a @@click="submit" class="blue-btn">儲存</a>
            </div>
        </div>
    </div>
    <div v-show="trialListPupUpOn" class="popup--wrapper">
        <div class="popup">
            <div class="popup--heading">
                <span>更新試聽名單</span>
                <i @@click="hidePopUp" @@keyup.esc="hidePopUp" class="fas fa-times"></i>
            </div>
            <div class="popup--body">
                <div>
                    <p class="width200">試聽名單</p>
                </div>
                <p style="color:red" v-if="!updateTrialList.trialList.length">目前尚無試聽學生</p>
                <ul v-else>
                    <li v-for="(item, index) in updateTrialList.trialList" :keys="index">
                        {{item}}<i @@click="removeTrialStudent(index)" style="color:red" class="fas fa-times"></i>
                    </li>
                </ul>
                <div>
                    <span class="popup-body__single-input">
                        <input placeholder="請輸入學生帳號/編號" v-model="student" @@keyup.enter="addTrialStudent" />
                        <a @@click="addTrialStudent" class="blue-btn">新增</a>
                    </span>
                </div>
            </div>
            <div class="popup--footer">
                <a @@click="updateTrialStudentList" class="blue-btn">儲存</a>
            </div>
        </div>
    </div>
    <div v-show="ProgressPupUpOn" class="popup--wrapper">
        <div class="popup">
            <div class="popup--heading">
                <span>學生進度</span>
                <i @@click="ProgressPupUpOn = false" class="fas fa-times"></i>
            </div>
            <div class="popup--body">
                <p style="color:red" v-if="!ProgressList.length">目前無學生看影片</p>
                <div v-else="" v-for="ProgressStr in ProgressList">
                    {{ProgressStr}}
                </div>
                <div v-show="ProgressListAll.length > 10" class="pagenation">
                    <a @@click.prevent="setProgressPage('P')">Previous</a>
                    <a @@click.prevent="setProgressPage('N')">Next</a>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
const vm = new Vue({
    el: '#app',
    data: {
        rawList:[],
        curList: [],
        student:'',
        updateTrialList: {
            seq:0,
            trialList: []
        },
        updateVideoInfo: {
            fileName: '',
            Seq : 0,
        },
        ProgressList: [],
        ProgressListAll: [],
        pupUpOn: false,
        trialListPupUpOn: false,
        ProgressPupUpOn: false,
        isInsert: false,
        allSubjectList:[],
        subject: '',
        info: {
            CourseSeq:0,
            CourseName: '',
            SubjectId: '',
            Grade: '',
            Url:'',
            Enable: true,
            Student: [],
            CourseDate: ''
        },
        currPage: 1,
        itemPerPage: 10,
        ProgressPage: 1
    },
    mounted() {
        //取得所有影片，帶科目(查詢所有就放Null)
        const val = null;
        axios.post('@(Url.Content("~/Course/Query?SubjectId="))' + `${val}`)
            .then(res => {
                this.rawList = res.data.Data
                this.curList = this.rawList
            });
        //取得所有科目表
        axios.post('@Url.Content("~/Account/GetGradeSubject")')
            .then(res => {
                this.allSubjectList = res.data.Data
            });

    },
    computed: {
        groupSubjectByGrade() {
            return this.allSubjectList.find(item => String(item.GradeId) === String(this.info.Grade))
        },
        currentSubectList() {
            return this.groupSubjectByGrade ? this.groupSubjectByGrade.Subject : [];
        },
        previousPage() {
            return this.currPage - 1 > 0 ? this.currPage - 1 : 1;
        },
        nextPage() {
            return this.currPage + 1 > this.totalPageCount ? this.totalPageCount : this.currPage + 1;
        },
        totalPageCount() {
            return Math.ceil(this.curList.length / this.itemPerPage);
        },
        eachPageList() {
            const lastIdx = this.currPage * this.itemPerPage;
            const firstIdx = lastIdx - this.itemPerPage;

            return this.curList.slice(firstIdx, lastIdx);
        },
        //sortedCurList() {
        //    return this.GradeSoringRule === 0 ? this.curList : this.GradeSoringRule === 1 ?
        //        this.curList.sort((a, b) => a.Grade - b.Grade) : this.curList.sort((a, b) => b.Grade - a.Grade)
        //}
    },
    methods: {
        onInput(e) {
            this.currPage = 1;
            this.curList = this.rawList.filter(item =>
                item.CourseName.toLowerCase().indexOf(e.target.value.toLowerCase()) >= 0)
        },
        showPopUp(val) {
            axios.post('@Url.Content("~/Course/SingleQuery?Seq=")' + `${val}`)
                .then(res => {
                    const { CourseSeq, CourseName, Url, SubbjectInfo, Enable, Student, CourseDateStr } = res.data.Data
                    this.info.CourseSeq = CourseSeq
                    this.info.CourseName = CourseName
                    this.info.Url = Url
                    this.info.Grade = String(SubbjectInfo.SubjectGradeId)
                    this.info.Enable = Enable
                    this.info.SubjectId = String(SubbjectInfo.SubjectId)
                    this.info.Student = Student
                    this.info.CourseDate = CourseDateStr
                })
                .finally(() => { this.pupUpOn = true; })
        },
        showViedoPopUp(seq, url) {
            this.updateVideoInfo.Seq = seq;
            this.updateVideoInfo.fileName = url;
        },
        showTrialPopUp(seq, trialList) {
            this.updateTrialList.trialList = trialList
            this.updateTrialList.seq = seq
            this.trialListPupUpOn = true;
        },
        showProgressPupUp(seq) {
            axios.post('@Url.Content("~/Course/CourseVideoProgressQuery?Seq=")' + `${seq}`)
                .then(Progress => {
                    this.ProgressListAll = [];
                    this.ProgressList = [];
                    this.ProgressPage = 1;
                    Progress.data.Data.forEach(element => this.ProgressListAll.push(element));
                    Progress.data.Data.forEach(element => this.ProgressList.push(element));
                    const lastIdx = this.ProgressPage * this.itemPerPage;
                    const firstIdx = lastIdx - this.itemPerPage;
                    this.ProgressList = this.ProgressList.slice(firstIdx, lastIdx);
                })
                .finally(() => { this.ProgressPupUpOn = true; })
        },
        hidePopUp() {
            this.pupUpOn = false;
            this.trialListPupUpOn = false;

        },
        addTrialStudent() {
            //檢查部重複
            const isRepaeat = this.updateTrialList.trialList.some(item => item === this.student)
            if (this.student && !isRepaeat) {
                this.student
                this.updateTrialList.trialList.push(this.student);
                this.student = '';
            }
        },
        removeTrialStudent(index) {
            this.updateTrialList.trialList.splice(index, 1);
        },
        resetupdateVideoInfo() {
            this.updateVideoInfo.fileName = '';
        },
        addCourse() {
            this.isInsert = true;

            this.info = {
                CourseSeq: 0,
                CourseName: '',
                Url: '',
                SubjectId: '',
                Grade: '1',
                Enable: true
            }
            this.pupUpOn = true;
        },
        updateTrialStudentList() {
            let data = {
                CourseSeq : this.updateTrialList.seq,
                Student: this.updateTrialList.trialList
            }
            axios.post('@Url.Content("~/Course/UpdateAuditionStudent")', data)
                .then(res => {
                    alert(res.data.Msg)
                    if (res.data.Success) {
                        location.reload();
                    };
                });
        },
        submit() {
            let data = {
                CourseName: this.info.CourseName,
                SubjectId: parseInt(this.info.SubjectId),
                Enable: this.info.Enable,
                CourseSeq: this.info.CourseSeq,
                Url: this.info.Url,
                CourseDate: this.info.CourseDate
            }

            if (this.info.CourseSeq === 0) {
                //新增資料
                axios.post('@Url.Content("~/Course/Insert")', data)
                    .then(res => {
                        alert(res.data.Msg)
                        if (res.data.Success) {
                            location.reload();
                        };
                    });
            } else {
                //修改資料
                axios.post('@Url.Content("~/Course/Update")', data)
                    .then(res => {
                        alert(res.data.Msg)
                        if (res.data.Success) {
                            location.reload();
                        };
                    });
            }
        },
        setPage(n) {
            this.currPage = n
        },
        setProgressPage(n) {
            if (n == "P") {
                //上一頁
                if (this.ProgressPage == 1) return;
                this.ProgressPage = this.ProgressPage - 1;
                this.ProgressList = [];
                this.ProgressListAll.forEach(element => this.ProgressList.push(element));
                const lastIdx = this.ProgressPage * this.itemPerPage;
                const firstIdx = lastIdx - this.itemPerPage;
                this.ProgressList = this.ProgressList.slice(firstIdx, lastIdx);
            } else {
                //下一頁
                var Total = Math.ceil(this.ProgressListAll.length / this.itemPerPage);
                this.ProgressPage = this.ProgressPage + 1 > Total ? Total : this.ProgressPage + 1;
                this.ProgressList = [];
                this.ProgressListAll.forEach(element => this.ProgressList.push(element));
                const lastIdx = this.ProgressPage * this.itemPerPage;
                const firstIdx = lastIdx - this.itemPerPage;
                this.ProgressList = this.ProgressList.slice(firstIdx, lastIdx);
            };
        },
        pageRule(page) {
            return this.currPage == 1 || this.currPage == this.totalPageCount ?
                Math.abs(this.currPage - page) <= 2 : Math.abs(this.currPage - page) <= 1;
        },
        //sortByGrade(foo) {
        //    //calculate SortingCal 0 => default which is not working, 1 =>acs, -1 => des
        //    this.GradeSoringRule = this.sortRule % 2 === 0 ? 0 : foo
        //}
    }
});
</script>
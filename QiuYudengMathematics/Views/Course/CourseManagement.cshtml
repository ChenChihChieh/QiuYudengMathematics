@model Dictionary<int, string>
<div>課程管理</div>
<div>
    <input type="button" value="Query" onclick="Query()" />
    <input type="button" value="SingleQuery" onclick="SingleQuery()" />
    <input type="button" value="Insert" onclick="Insert()" />
    <input type="button" value="Update" onclick="Update()" />
    <div id="app" class="course-management">
        <div class="course-management__container">
            <div class="course-management__search-bar--flex">
                <input @@input="onInput($event)" placeholder="請輸入課程名稱" type="search">
                <div class="course-management__btn-wrapper">
                    <a @@click="addPerson" class="blue-btn">新增</a>
                </div>
            </div>
            <div class="course-management__table">
                <div class="course-management__tr">
                    <div class="course-management__th">課程</div>
                    <div class="course-management__th">名稱</div>
                    <div class="course-management__th">年級</div>
                    <div class="course-management__th">科目</div>
                    <div class="course-management__th">狀態</div>
                    <div class="course-management__th">管理</div>
                </div>
                <div class="course-management__tr" v-for="item in allCourseList" :key="item.Account">
                    <div class="course-management__td">
                        <img class="course-thumbnail" style="width:70px;height:40px;" :src="'http://img.youtube.com/vi/'+courseUrl(item.Url)+'/sddefault.jpg'"/>
                    </div>
                    <div class="course-management__td">{{item.CourseName}}</div>
                    <div class="course-management__td">item.</div>
                    <div class="course-management__td">科目</div>
                    <div class="course-management__td">
                        <i v-if="item.Enable" style="color:forestgreen" class="far fa-circle"></i>
                        <i v-else style="color:red" class="fas fa-times"></i>
                    </div>
                    <div class="course-management__td"><a @@click.prevent="showPopUp(item.Account)"><i class="fas fa-cog"></i></a></div>
                </div>
            </div>
            <div class="pagenation">
                <a @@click.prevent="setPage(1)">First</a>
                <a @@click.prevent="setPage(previousPage)">Previous</a>
                <a v-for="(n, index) in totalPageCount" v-show="pageRule(n)" v-bind:class=" currPage === n ? 'active' : '' " :key="n"
                   @@click.prevent="setPage(n)">{{n}}</a>
                <a @@click.prevent="setPage(nextPage)">Next</a>
                <a @@click.prevent="setPage(totalPageCount)">Last</a>
            </div>
        </div>
        <div v-show="pupUpOn" class="popup--wrapper">
            <div class="popup">
                <div class="popup--heading">
                    <span>學生管理</span>
                    <i @@click="hidePopUp" class="fas fa-times"></i>
                </div>
                <div class="popup--body">
                    <div v-show="info.Account"><p>帳號</p><input class="width200" :value="info.Account" disabled /></div>
                    <div><p>姓名</p><input class="width200" :value="info.Name" v-model="info.Name" /></div>
                    <div>
                        <p>年級</p>
                        <div class="width200">
                            <input type="radio" id="one" value="1" v-model="Grade">
                            <label for="one">高一</label>
                            <input type="radio" id="two" value="2" v-model="Grade">
                            <label for="two">高二</label>
                            <input type="radio" id="three" value="3" v-model="Grade">
                            <label for="three">高三</label>
                        </div>
                    </div>
                    <div>
                        <p>狀態</p>
                        <div class="width200">
                            <input type="checkbox" id="checkbox" v-model="info.Enable">
                            <label for="checkbox">{{ info.Enable?"啟用":"停用" }}</label>
                        </div>
                    </div>
                    <div>
                        <p>科目</p>
                        <div class="width200">
                            <div v-for="item in currentSubectList" class="subject-item">
                                <input type="checkbox" :id="item.ID" :value="String(item.ID)" v-model="checkedList">
                                <label :for="item.ID">{{item.SubjectName}},{{item.ID}}</label>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    const vm = new Vue({
        el: '#app',
        data: {
            Grade:1,
            curList:[],
            rawList: [],
            pupUpOn: false,
            checked: true,
            allSubjectList:[],
            allCourseList:[],
            checkedList:[],
            info: {
                CourseName: '',
                Url: '',
                SubjectId: 1,
                Enable: true,
                Student: []
            },
            currPage: 1,
            itemPerPage: 10,
            GradeSoringRule: 0
        },
        mounted() {
             //取得所有影片，帶科目(查詢所有就放Null)
            const val = null;
            axios.post('@(Url.Content("~/Course/Query?SubjectId="))' + `${val}`)
                .then(res => {
                    console.log('course',res.data.Data)
                    this.allCourseList = res.data.Data
                });
            //取得所有科目表
            axios.post('@Url.Content("/Account/GetGradeSubject")')
                .then(res => {
                    console.log('subject',res.data.Data)
                    this.allSubjectList = res.data.Data
                });

        },
        computed: {
            groupSubjectByGrade() {
                return this.allSubjectList.find(item => String(item.GradeId) === String(this.info.Grade))
            },
            currentSubectList() {
                return this.groupSubjectByGrade ? this.groupSubjectByGrade.Subject : [];
            },
            previousPage() {
                return this.currPage - 1 > 0 ? this.currPage - 1 : 1;
            },
            nextPage() {
                return this.currPage + 1 > this.totalPageCount ? this.totalPageCount : this.currPage + 1;
            },
            totalPageCount() {
                return Math.ceil(this.curList.length / this.itemPerPage);
            },
            eachPageList(state, getters) {
                const lastIdx = this.currPage * this.itemPerPage;
                const firstIdx = lastIdx - this.itemPerPage;

                return this.sortedCurList.slice(firstIdx, lastIdx);
            },
            sortedCurList() {
                return this.GradeSoringRule === 0 ? this.curList : this.GradeSoringRule === 1 ?
                    this.curList.sort((a, b) => a.Grade - b.Grade) : this.curList.sort((a, b) => b.Grade - a.Grade)
            }
        },
        methods: {
            mapSubjectAndGrade(id) {
                this.allSubjectList.
            },
            courseUrl(url) {
                const parsingUrl = new URL(url);
                return parsingUrl.searchParams.get('v')
            },
            onInput(e) {
                if (e) {
                    this.curList = this.rawList.filter(item =>
                        item.Name.toLowerCase().indexOf(e.target.value.toLowerCase()) >= 0)
                } else {
                    this.curList = this.rawList
                }
            },
            showPopUp(val) {
                axios.post('@Url.Content("/Account/SingleQuery?Id=")' + `${val}`)
                    .then(res => {
                        this.info.Account = res.data.Data.Account
                        this.info.Name = res.data.Data.Name
                        this.info.Grade = String(res.data.Data.Grade)
                        this.info.Subject = res.data.Data.Subject
                        this.info.Enable = res.data.Data.Enable
                        this.info.Subject = res.data.Data.Subject.filter(item => item.Detriment)

                    }).finally(() => { this.pupUpOn = true; })
            },
            hidePopUp() {
                this.pupUpOn = false;
            },
            addPerson() {
                this.info= {
                    Account: '',
                    Name: '',
                    Grade: "1",
                    Enable: true,
                    Subject: []
                }
                this.pupUpOn = true;
            },
            clearDevice(val) {
                axios.post('@Url.Content("/Account/DeleteDevice?Id=")' + `${val}`)
                    .then(res => alert(res.data.Msg))
            },
            submit() {
                let data = {
                    Name: this.info.Name,
                    Grade: parseInt(this.info.Grade),
                    Enable: this.info.Enable,
                }
                if (this.checkedList) {
                    data.Subject = this.checkedList.map(item => parseInt(item))
                }
                if (this.info.Account) {
                    //修改學生資料
                    data.Account = this.info.Account

                    console.log(data)
                    axios.post('@Url.Content("/Account/Update")', data)
                        .then(res => alert(res.data.Msg))
                } else {
                    //新增學生資料
                    console.log(data)
                    axios.post('@Url.Content("/Account/Insert")', data)
                        .then(res => {
                            alert(res.data.Msg)
                            location.reload()
                        });
                }
                this.pupUpOn = false;
            },
            setPage(n) {
                this.currPage = n
            },
            pageRule(page) {
                return this.currPage == 1 || this.currPage == this.totalPageCount ?
                    Math.abs(this.currPage - page) <= 2 : Math.abs(this.currPage - page) <= 1;
            },
            sortByGrade(foo) {
                //calculate SortingCal 0 => default which is not working, 1 =>acs, -1 => des
                this.GradeSoringRule = this.sortRule % 2 === 0 ? 0 : foo
            }
        }
    });
</script>

<script type="text/javascript">
    function Query() {
        var aa = null; //這是條件，帶科目(查詢所有就放Null)
        $.post("@(Url.Content("~/Course/Query?SubjectId="))" + aa, function (x) {
            alert(x.Data[0].CourseName);
        });
    };

    function SingleQuery() {
        //查單一影片，放影片Seq
        $.post("@(Url.Content("~/Course/SingleQuery?Seq="))" + 1, function (x) {
            alert(x.Data.CourseName);
        });
    };

    function Insert() {
        var data = {
            CourseName: 'Test2',
            Url: 'https://www.youtube.com/embed/HUZki1tTB0A', //後端會檢查格式，前端檢查是否必填
            SubjectId: 2,
            Enable: false,
            Student: ['000003'] //影片個別放沒有購買課程的學生,沒設定就放Null
        };
        $.post("@(Url.Content("~/Course/Insert"))", data, function (x) {
            alert(x.Msg);
        });
    };

    function Update() {
        var data = {
            CourseSeq: 1,
            CourseName: 'TestTwo',
            Url: 'https://www.youtube.com/embed/1v1CiLQXho8?list=RD1v1CiLQXho8', //後端會檢查格式，前端檢查是否必填
            SubjectId: 2,
            Enable: true,
            Student: null //影片個別放沒有購買課程的學生,沒設定就放Null
        };
        $.post("@(Url.Content("~/Course/Update"))", data, function (x) {
            alert(x.Msg);
        });
    };
</script>
@model Dictionary<int, string>

<div id="app" class="account">
    <div class="account__container">
        <div class="account__search-bar--flex">
            <input @@input="onInput($event)" placeholder="請輸入姓名" type="search">
            <div class="account__btn-wrapper">
                <a @@click="addPerson" class="blue-btn">新增</a>
            </div>
        </div>
        <div class="account__table">
            <div class="account__tr">
                <div class="account__th">帳號</div>
                <div class="account__th">姓名</div>
                <div class="account__th">年級
                    <div class="account__grade-sorting">
                        <span @@click="sortByGrade(1)" v-bind:class="this.GradeSoringRule === 1 ? 'active' : ''" class="account__grade-btn account__grade-ascending"></span>
                        <span @@click="sortByGrade(-1)" v-bind:class="this.GradeSoringRule === -1 ? 'active' : ''" class="account__grade-btn account__grade-descending"></span>
                    </div>
                </div>
                <div class="account__th">狀態</div>
                <div class="account__th">管理</div>
            </div>
            <div class="account__tr" v-for="item in eachPageList" :key="item.Account">
                <div class="account__td">{{item.Account}}</div>
                <div class="account__td">{{item.Name}}</div>
                <div class="account__td">{{item.GradeName}}</div>
                <div class="account__td">
                    <i v-if="item.Enable" style="color:forestgreen" class="far fa-circle"></i>
                    <i v-else style="color:red" class="fas fa-times"></i>
                </div>
                <div class="account__td"><a @@click.prevent="showPopUp(item.Account)"><i class="fas fa-cog"></i></a></div>
            </div>
        </div>
        <div v-show="curList.length > 10" class="pagenation">
            <a @@click.prevent="setPage(1)">First</a>
            <a @@click.prevent="setPage(previousPage)">Previous</a>
            <a v-for="(n, index) in totalPageCount" v-show="pageRule(n)" v-bind:class=" currPage === n ? 'active' : '' " :key="n"
               @@click.prevent="setPage(n)">{{n}}</a>
            <a @@click.prevent="setPage(nextPage)">Next</a>
            <a @@click.prevent="setPage(totalPageCount)">Last</a>
        </div>
    </div>
    <div v-show="pupUpOn" class="popup--wrapper">
        <div class="popup">
            <div class="popup--heading">
                <span>學生管理</span>
                <i @@click="hidePopUp" class="fas fa-times"></i>
            </div>
            <div class="popup--body">
                <div v-show="info.Account"><p>帳號</p><input class="width200" :value="info.Account" disabled /></div>
                <div><p>姓名</p><input class="width200" :value="info.Name" v-model="info.Name" /></div>
                <div>
                    <p>年級</p>
                    <div class="width200">
                        <input type="radio" id="one" value="1" v-model="info.Grade">
                        <label for="one">高一</label>
                        <input type="radio" id="two" value="2" v-model="info.Grade">
                        <label for="two">高二</label>
                        <input type="radio" id="three" value="3" v-model="info.Grade">
                        <label for="three">高三</label>
                    </div>
                </div>
                <div>
                    <p>狀態</p>
                    <div class="width200">
                        <input type="checkbox" id="checkbox" v-model="info.Enable">
                        <label for="checkbox">{{ info.Enable?"啟用":"停用" }}</label>
                    </div>
                </div>
                <div>
                    <p>科目</p>
                    <div class="width200">
                        <div v-for="item in currentSubectList" class="subject-item">
                            <input type="checkbox" :id="item.ID" :value="String(item.ID)" v-model="checkedList">
                            <label :for="item.ID">{{item.SubjectName}}</label>
                        </div>
                    </div>
                </div>
            </div>
            <div class="popup--footer">
                <a @@click="clearDevice(info.Account)" class="red-btn">清除裝置</a>
                <a @@click="pwdReset(info.Account)" class="red-btn">重置密碼</a>
                <a @@click="submit" class="blue-btn">儲存</a>
            </div>
        </div>
    </div>
</div>


<script type="text/javascript">
    const vm = new Vue({
        el: '#app',
        data: {
            curList:[],
            rawList: [],
            pupUpOn: false,
            checked: true,
            allSubjectList:[],
            checkedList:[],
            info: {
                Account: '',
                Name: '',
                Grade: 1,
                Enable: true,
                Subject: []
            },
            currPage: 1,
            itemPerPage: 10,
            GradeSoringRule: 0
        },
        mounted() {
            const data = {
                Name: '',
                Grade: null,
                Enable: null
            }
            axios.post('@Url.Content("/Account/GetGradeSubject")')
                .then(res => {
                    this.allSubjectList = res.data.Data
                });
            axios.post('@Url.Content("/Account/Query")', data)
                .then(res => {
                    this.rawList = res.data.Data;
                    this.curList = this.rawList
                });

        },
        computed: {
            groupSubjectByGrade() {
                return this.allSubjectList.find(item => String(item.GradeId) === String(this.info.Grade))
            },
            currentSubectList() {
                return this.groupSubjectByGrade ? this.groupSubjectByGrade.Subject : [];
            },
            checkedSubjectList() {
                return this.info.Subject.map(item => String(item.ID))
            },
            previousPage() {
                return this.currPage - 1 > 0 ? this.currPage - 1 : 1;
            },
            nextPage() {
                return this.currPage + 1 > this.totalPageCount ? this.totalPageCount : this.currPage + 1;
            },
            totalPageCount() {
                return Math.ceil(this.curList.length / this.itemPerPage);
            },
            eachPageList(state, getters) {
                const lastIdx = this.currPage * this.itemPerPage;
                const firstIdx = lastIdx - this.itemPerPage;

                return this.sortedCurList.slice(firstIdx, lastIdx);
            },
            sortedCurList() {
                return this.GradeSoringRule === 0 ? this.curList : this.GradeSoringRule === 1 ?
                    this.curList.sort((a, b) => a.Grade - b.Grade) : this.curList.sort((a, b) => b.Grade - a.Grade)
            }
        },
        methods: {
            onInput(e) {
                this.currPage = 1;
                this.curList = this.rawList.filter(item =>
                    item.Name.toLowerCase().indexOf(e.target.value.toLowerCase()) >= 0)
                
            },
            showPopUp(val) {
                axios.post('@Url.Content("/Account/SingleQuery?Id=")' + `${val}`)
                    .then(res => {
                        this.info.Account = res.data.Data.Account
                        this.info.Name = res.data.Data.Name
                        this.info.Grade = String(res.data.Data.Grade)
                        this.info.Subject = res.data.Data.Subject
                        this.info.Enable = res.data.Data.Enable
                        this.info.Subject = res.data.Data.Subject.filter(item => item.Detriment)

                        this.checkedList = this.checkedSubjectList
                    }).finally(() => { this.pupUpOn = true; })
            },
            hidePopUp() {
                this.pupUpOn = false;
            },
            addPerson() {
                this.info= {
                    Account: '',
                    Name: '',
                    Grade: "1",
                    Enable: true,
                    Subject: []
                }
                this.pupUpOn = true;
            },
            clearDevice(val) {
                axios.post('@Url.Content("/Account/DeleteDevice?Id=")' + `${val}`)
                    .then(res => {
                        alert(res.data.Msg);
                        if (res.data.Success)
                            this.pupUpOn = false;
                    });
            },
            pwdReset(val) {
                axios.post('@Url.Content("/Account/PwdReset?Id=")' + `${val}`)
                    .then(res => {
                        alert(res.data.Msg);
                        if (res.data.Success)
                            this.pupUpOn = false;
                    });
            },
            submit() {
                let data = {
                    Name: this.info.Name,
                    Grade: parseInt(this.info.Grade),
                    Enable: this.info.Enable,
                }
                if (this.checkedList) {
                    data.Subject = this.checkedList.map(item => parseInt(item))
                }
                if (this.info.Account) {
                    //修改學生資料
                    data.Account = this.info.Account

                    console.log(data)
                    axios.post('@Url.Content("/Account/Update")', data)
                        .then(res => {
                            alert(res.data.Msg)
                            if (res.data.Success) {
                                location.reload();
                            };
                        });
                } else {
                    //新增學生資料
                    console.log(data)
                    axios.post('@Url.Content("/Account/Insert")', data)
                        .then(res => {
                            alert(res.data.Msg)
                            if (res.data.Success) {
                                location.reload();
                            };
                        });
                }
            },
            setPage(n) {
                this.currPage = n
            },
            pageRule(page) {
                return this.currPage == 1 || this.currPage == this.totalPageCount ?
                    Math.abs(this.currPage - page) <= 2 : Math.abs(this.currPage - page) <= 1;
            },
            sortByGrade(foo) {
                //calculate SortingCal 0 => default which is not working, 1 =>acs, -1 => des
                this.GradeSoringRule = this.sortRule % 2 === 0 ? 0 : foo
            }
        }
    });
</script>
